<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<?asciidoc-numbered?>

<book lang="en">
  <bookinfo>
    
    <title>MAVEN</title>
    
    
    <date>2014-08-28</date>
    
    
    
    
<!--<subtitle>Some subtitle</subtitle -->
<!--
<releaseinfo>4.0.0-SNAPSHOT</releaseinfo>
<corpauthor>
   <inlinemediaobject>
      <imageobject>
         <imagedata fileref="./images/hibernate_ogm_600px.png"
                    format="PNG"
                    scalefit="1"
                    width="444"/>
      </imageobject>
      <textobject>
         <phrase>Logo</phrase>
      </textobject>
   </inlinemediaobject>
</corpauthor>

<authorgroup xml:base="Author_Group.xml">
   <author>
      <firstname>Emmanuel</firstname>
      <surname>Bernard</surname>
      <affiliation>
         <shortaffil>Red Hat</shortaffil>
      </affiliation>
   </author>
   <author>
      <firstname>Sanne</firstname>
      <surname>Grinovero</surname>
      <affiliation>
         <shortaffil>Red Hat</shortaffil>
      </affiliation>
   </author>
   <collab>
     <collabname>Guillaume Scheibel</collabname>
   </collab>
</authorgroup>
 -->

<authorgroup xml:base="Author_Group.xml">
   <author>
      <firstname>NAIF</firstname>
      <affiliation>
         <shortaffil>SIMASOFT</shortaffil>
      </affiliation>
   </author>
</authorgroup>
    
    

  </bookinfo>
<chapter id="mavenn-introducion">
<title>INTRODUCI&#211;N</title>

<itemizedlist>
  
    <listitem>
      <simpara>Maven es una herramienta de gesti&#243;n de proyectos. yyy</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Se basa en un fichero central, pom.xml, donde se define todo lo que necesita el proyecto.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Maven maneja las dependencias del proyecto, compila, empaqueta y ejecuta los test.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Mediante plugins, permite hacer mucho mas, como por ejemplo desplegar la aplicaci&#243;n, etc.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Lo mas &#250;til de Maven, es el manejo de las dependencias, solo se necesita definir en el pom.xml las dependencias
que se necesitan y maven las descarga y las a&#241;ade al classpath.</simpara>
      
    </listitem>
  
</itemizedlist>

</chapter>
<chapter id="_a_maven_project">
<title>A Maven project</title>
<simpara>A Maven project is simply a folder in your filesystem (also known as the project root folder) that contains a file called pom.xml, the XML representation
of your Project Object Model (POM); this is the first and most important Maven convention.</simpara>
<simpara>This minimal structure allows you to run a mvn command from the project root folder. By default, the mvn command searches for a pom.xml file in the local folder and it stops immediately if it is not able to find it.</simpara>
<simpara>By convention, all artifacts generated by the build are delivered in a folder relative to the pom.xml location known as Build Directory (the target by default). Since the target is generated on each build, it is:</simpara>

<itemizedlist>
  
    <listitem>
      <simpara>Safe to delete it anytime</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Crucial to ignore it when sharing the project using a Version Control System software</simpara>
      
    </listitem>
  
</itemizedlist>

<simpara>A Maven project defines a packaging, which identifies the main objective of the build, which in turn specifies the artifact that is going to be produced by the
invocation of the build.Default JAR (other values are EAR, EJB, RAR, PAR, WAR, and POM).</simpara>
<simpara>POM packaging is an exception, since:</simpara>

<itemizedlist>
  
    <listitem>
      <simpara>The Maven build does not produce an artifact</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>The Maven build considers as the only artifact the main pom.xml file of the Maven project</simpara>
      
    </listitem>
  
</itemizedlist>

<simpara>A POM Maven project can be useful for the following activities:</simpara>

<itemizedlist>
  
    <listitem>
      <simpara>Aggregate dependencies (for more information, you can navigate to Lifecycle | Dependency Management)</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Parent POM (for more information, you can navigate to Lifecycle | Multi-module project)</simpara>
      
    </listitem>
  
</itemizedlist>

<simpara><ulink url="http://maven.apache.org/ref/3.1.1/maven-model-builder/super-pom.html">http://maven.apache.org/ref/3.1.1/maven-model-builder/super-pom.html</ulink></simpara>
</chapter>
<chapter id="_creating_from_an_archetype">
<title>Creating from an archetype</title>
<simpara>Now it&#8217;s time for some action! We are creating a new Java project�containing a Maven build�starting from an archetype, using the maven-archetype-quickstart command (we will read more about archetypes in the next section). You don&#8217;t need to create any file or folder in advance; Maven will take care of creating the root project folder and the initial content.</simpara>

<itemizedlist>
  
    <listitem>
      <simpara>Run the following command:</simpara>
      

<literallayout class="monospaced">mvn archetype:generate -DgroupId=com.mycompany.demo -DartifactId=myapp -DarchetypeArtifactId=maven-archetype-quickstart-DinteractiveMode=false</literallayout>


      
    </listitem>
  
</itemizedlist>

<simpara>As you can see, the command specifies one property for each coordinate that identifies the archetype <ulink url="http://search.maven.org/#artifactdetails_org.apache.maven.archetypes_maven-archetype-quickstart_1.1_maven-archetype">http://search.maven.org/#artifactdetails_org.apache.maven.archetypes_maven-archetype-quickstart_1.1_maven-archetype</ulink>.</simpara>
<simpara>The preceding command will ask you some information regarding the project (groupId, artifactId, version) you&#8217;re about to create. The rules for Maven artifact coordinates apply; so let&#8217;s assume the following values:</simpara>
<programlisting language="JAVA" linenumbering="unnumbered">groupId: com.mycompany.demo
artifactId: myapp
version: 1.0-SNAPSHOT</programlisting>
<simpara>If everything goes fine, the end of the output should be similar to the following:</simpara>
<programlisting language="JAVA" linenumbering="unnumbered">[INFO] BUILD SUCCESS
[INFO] ----------------------------------------------------------
[INFO] Total time: 12.653s
[INFO] Finished at: Sun Mar 17 16:38:36 CET 2013
[INFO] Final Memory: 7M/265M
[INFO] ----------------------------------------------------------
[source, JAVA]</programlisting>
<simpara>The process will download the needed dependencies into your Maven Local Repository; with a fast connection, you should be done in less than a minute.</simpara>
<simpara>The root project folder�with the same name as the artifactId coordinate you&#8217;ve specified earlier�should now
be located in the same place where you ran the last mvn command.</simpara>
</chapter>
<chapter id="_exploring_the_project_structure">
<title>Exploring the project structure</title>
<simpara>Let&#8217;s now explore the newly created myapp folder. At the first level, you can see POM represented by the pom.xml file; the src folder contains all other project files.</simpara>
<simpara>The project file&#8217;s structure will be as follows:</simpara>
<programlisting language="JAVA" linenumbering="unnumbered">myapp
|-- pom.xml
|-- src
|   '-- main
|     '-- java
|       '-- com
|         '-- mycompany
|           '-- demo
|             '-- App.java
|   '-- test
|     '-- java
|       '-- com
|         '-- mycompany
|           '-- demo
|             '-- AppTest.java</programlisting>
<simpara>The components of the structure are explained as follows:</simpara>

<itemizedlist>
  
    <listitem>
      <simpara><emphasis role="strong">pom.xml:</emphasis> Defines the project&#8217;s coordinates, a profile, and some dependencies.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">src/main/java:</emphasis> Contains the project&#8217;s source code. You can see that a sample App.java file has been created, which contains a Java "Hello World" application.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">src/test/java:</emphasis> Contains a JUnit test.</simpara>
      
    </listitem>
  
</itemizedlist>

<section id="_exploring_pom">
<title>Exploring POM</title>
<simpara>The following code snippet shows the reported pom.xml content:</simpara>
<programlisting language="XML" linenumbering="unnumbered">&lt;project&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;com.mycompany.demo&lt;/groupId&gt;
    &lt;artifactId&gt;myapp&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;
    &lt;name&gt;myapp&lt;/name&gt;
    &lt;url&gt;http://maven.apache.org&lt;/url&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;3.8.1&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/project&gt;</programlisting>
<simpara>The pom.xml file that is defined is simple and easy to understand:</simpara>

<itemizedlist>
  
    <listitem>
      <simpara>It defines a <emphasis role="strong">&lt;packaging&gt;jar&lt;/packaging&gt;</emphasis> element, therefore we expect to produce a JAR file from this build</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>It specifies a dependency to the JUnit library, limiting it to test the scope (scopes are explained in the next section)</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>It defines all the coordinates to identify it as an artifact (<emphasis role="strong">groupId</emphasis>, <emphasis role="strong">artifactId</emphasis>, and <emphasis role="strong">version</emphasis>),
which are the same that are typed when running mvn archetype:generate:</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara><emphasis role="strong">groupId:</emphasis> Represents the group, company, team, organization, and/or project</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">artifactId:</emphasis> Represents the name of the project (or project module)</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">version:</emphasis> Represents the number of the current release; since our version ends with SNAPSHOT,
it means that this is an unreleased project (development is in progress)</simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
</itemizedlist>

</section>
<section id="_compile_install_and_run">
<title>Compile, install, and run</title>
<simpara>From the root project folder, run <emphasis role="strong">mvn install</emphasis> and check the target folder. Maven generates the following files and folders in the target folder:</simpara>

<itemizedlist>
  
    <listitem>
      <simpara><emphasis role="strong">classes:</emphasis> Contains the compiled Java sources (.class files) found in src/main/java and also the contents of src/main/resources (in our case it is empty). Used by the resources:resources andcompiler:compile goals.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">test-classes:</emphasis> This is the same as classes, but it is applied to src/test/java and src/test/resources. Used by the resources:testResources and compiler:testCompile goals.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">maven-archiver:</emphasis> Contains a manifest file of the Maven project; you can read more on the Maven official documentation available at <ulink url="http://maven.apache.org/shared/maven-archiver/index.html">http://maven.apache.org/shared/maven-archiver/index.html</ulink>.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">surefire-reports:</emphasis> Contains the Surefire Plugin reports; the folder is empty, since no tests are defined in this project (src/main/test is empty). Created by the surefire:test goal.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">myapp-1.0-SNAPSHOT.jar:</emphasis> Contains the contents of the classes folder compressed in a JAR. Created by the jar:jar goal.</simpara>
      
    </listitem>
  
</itemizedlist>

<simpara>The same JAR file has been copied into your Maven Local Repository by the install:install goal, and it is located
in <emphasis role="strong">~/repository/com/mycompany/demo/myapp/1.0-SNAPSHOT/myapp-1.0-SNAPSHOT.war.</emphasis></simpara>

<itemizedlist>
  
    <listitem>
      <simpara>To run a console Java application packaged as a JAR file, the command is as follows:</simpara>
      

<literallayout class="monospaced">java -jar target/myapp-1.0-SNAPSHOT.jar</literallayout>


      
    </listitem>
  
</itemizedlist>

<simpara>Unfortunately, we forgot to insert into the JAR archive any information about what the main executable class is, so we get an error message as follows:</simpara>
<programlisting language="console" linenumbering="unnumbered">Failed to load Main-Class manifest attribute from
myapp-1.0-SNAPSHOT.jar</programlisting>
<simpara>To solve this issue, you can use maven-jar-plugin (more information is available at
<ulink url="http://maven.apache.org/shared/maven-archiver/examples/classpath.html">http://maven.apache.org/shared/maven-archiver/examples/classpath.html</ulink> as follows:</simpara>
<programlisting language="XML" linenumbering="unnumbered">&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.4&lt;/version&gt;
    &lt;configuration&gt;
        &lt;archive&gt;
            &lt;manifest&gt;
                &lt;mainClass&gt;com.mycompany.demo.App&lt;/mainClass&gt;
            &lt;/manifest&gt;
        &lt;/archive&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;</programlisting>
<simpara>Now you can run mvn clean install to (re)create the JAR file containing a complete Java manifest file, with the following line:</simpara>

<literallayout class="monospaced">Main-Class: com.mycompany.demo.App</literallayout>

<simpara>You can now confidently run the application, using the following command:</simpara>

<literallayout class="monospaced">java -jar target/myapp-1.0-SNAPSHOT.jar</literallayout>

</section>
<section id="_changing_pom">
<title>Changing POM</title>
<simpara>By default, Maven uses Java 5, but it is possible to add the Compiler Plugin to tell Maven which JDK version to use for compiling your project.</simpara>
<simpara>Insert the following XML snippet just before the <emphasis role="strong">&lt;dependencies&gt;</emphasis> tag:</simpara>
<programlisting language="XML" linenumbering="unnumbered">&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
    &lt;version&gt;3.1&lt;/version&gt;
    &lt;configuration&gt;
        &lt;source&gt;1.7&lt;/source&gt;
        &lt;target&gt;1.7&lt;/target&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;</programlisting>
<simpara>This additionally allows you to choose the source and target JDK versions (in this case, it means that the compiler accepts Java Version 1.7 statements).</simpara>
<simpara>It could be a good idea to set JUnit to a more recent version, which at this time is 4.11. Just edit the version number within the &lt;dependency&gt; element:</simpara>
<programlisting language="XML" linenumbering="unnumbered">&lt;dependency&gt;
    &lt;groupId&gt;junit&lt;/groupId&gt;
    &lt;artifactId&gt;junit&lt;/artifactId&gt;
    &lt;version&gt;4.11&lt;/version&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;</programlisting>
<simpara>We don&#8217;t need to think about the transitive dependencies, as Maven will handle them for us;
we just need to change the &lt;version&gt; value and re-run the build.</simpara>
</section>
<section id="_analyzing_the_console_and_fixing_warnings">
<title>Analyzing the console and fixing warnings</title>
<simpara>The Maven console output is the most authoritative source (along with the effective POM that will be discussed later) to
know what a Maven build is doing; it is a very good exercise to read the console output and see what operations are performed by the Maven build.</simpara>
<simpara>You should also see one (type of) warning:</simpara>

<literallayout class="monospaced">[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!</literallayout>

<simpara>This warning is triggered by the resources:resources goal execution and it&#8217;s informing us
that�since we haven&#8217;t specified an encoding in the build�the plugin will use one of the current platforms, which is a common build portability issue.</simpara>
<simpara>To fix the issue, we just need to define a property:</simpara>
<programlisting language="XML" linenumbering="unnumbered">&lt;properties&gt;
  &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
&lt;/properties&gt;</programlisting>
<simpara>Well done! Your final pom.xml file should look like this:</simpara>
<programlisting language="XML" linenumbering="unnumbered">&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/maven-v4_0_0.xsd"&gt;

    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.mycompany.demo&lt;/groupId&gt;
    &lt;artifactId&gt;myapp&lt;/artifactId&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;

    &lt;name&gt;myapp JAR application&lt;/name&gt;
    &lt;url&gt;http://maven.apache.org&lt;/url&gt;

    &lt;properties&gt;
       &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;/properties&gt;

    &lt;build&gt;
        &lt;plugins&gt;

            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;version&gt;3.1&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;source&gt;1.7&lt;/source&gt;
                    &lt;target&gt;1.7&lt;/target&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;

            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.4&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;archive&gt;
                     &lt;manifest&gt;
                    &lt;mainClass&gt;com.mycompany.demo.App&lt;/mainClass&gt;
                     &lt;/manifest&gt;
                    &lt;/archive&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;

        &lt;/plugins&gt;
    &lt;/build&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.11&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

&lt;/project&gt;</programlisting>
</section>
</chapter>
<chapter id="maven-instalacion">
<title>INSTALACION</title>

<itemizedlist>
  
    <listitem>
      <simpara>Descargar <ulink url="http://maven.apache.org/download.html">http://maven.apache.org/download.html</ulink></simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Configurar la variable de Entorno:  M2_HOME. Ejemplo: M2_HOME=D:\javajdk\maven\3.0.2</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Agregar el Maven al Path del windows. Ejemplos: &#8230;; %M2_HOME%\bin</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Probar la instalaci&#243;n abriendo una ventana de D.O.S con cmd y digitar: mvn --version</simpara>
      
    </listitem>
  
</itemizedlist>

</chapter>
<chapter id="_installation">
<title>Installation</title>
<simpara>Maven is a Java application, and it is distributed for the most adopted platforms; in this section we will cover the installation using the pre-built,
binary package downloadable directly from the Apache project page, which is the most advised way to install Apache Maven, as opposed to Rpm, Deb,
HomeBrew, MacPorts, and any other operating system-specific installation manager.</simpara>
<section id="_step_1_prerequisites">
<title>Step 1: Prerequisites</title>
<simpara>Maven needs minimal resources to run. Just be sure to have at least Java 1.5 installed:</simpara>

<itemizedlist>
  
    <listitem>
      <simpara><emphasis role="strong">Java:</emphasis> JDK 1.5 or above</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">Memory:</emphasis> No minimum memory limit, but at least 32 MB for the Maven processes are needed</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">Disk space:</emphasis></simpara>
      
    </listitem>
  
    <listitem>
      <simpara>No formal minimum limit, but Maven actually needs a few hundred available megabytes of disk</simpara>
      
    </listitem>
  
</itemizedlist>

</section>
<section id="_step_2_downloading_maven">
<title>Step 2: Downloading Maven</title>
<simpara>Open the browser to <ulink url="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</ulink> and follow the instructions; download the ZIP archive for Windows or the tar.gz archive for Unix-like operating systems containing the Apache Maven binaries</simpara>
</section>
<section id="_step_3_installing_maven">
<title>Step 3: Installing Maven</title>
<simpara>The installation process is almost exactly the same across different platforms, but the command-line syntax differs a bit.</simpara>
<section id="_microsoft_windows">
<title>Microsoft Windows</title>
<orderedlist numeration="arabic">
  
    <listitem>
      <simpara>Unzip the distribution archive, that is, apache-maven-3.0.5-bin.zip, to (for example) C:\Program Files\Apache. The subdirectory apache-maven-3.0.5 will be created in that folder while uncompressing the archive.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Open up the system properties window, select the Advanced tab and the Environment Variables button, then add the M2_HOME variable as a user variable with the value C:\Program Files\Apache\apache-maven-3.0.5.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>In the same dialog, append%M2_HOME%\bin to the PATH variable value.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Add MAVEN_OPTS as a user variable to specify JVM properties. A value of -Xms256m -Xmx512m could be a good start.</simpara>
      
    </listitem>
  
</orderedlist>
</section>
<section id="_linux_and_mac_os_x">
<title>Linux and Mac OS X</title>
<simpara>Installing on Linux and Mac OS X is practically the same process:</simpara>
<orderedlist numeration="arabic">
  
    <listitem>
      <simpara>Download and extract the apache-maven-3.0.5-bin.tar.gz file to the directory you wish to install Maven, for example /usr/local/apache-maven-3.0.5.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Define M2_HOME using export M2_HOME=/usr/local/apache-maven-3.0.5. You can optionally set it in ~/.bash_profile.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Add Maven binaries to the classpath export PATH=$PATH:$M2_HOME/bin. You can optionally set it in ~/.bash_profile.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Add the MAVEN_OPTS environment variable to the same .profile file, for example export MAVEN_OPTS="-Xms256m -Xmx512m".</simpara>
      
    </listitem>
  
</orderedlist>
</section>
</section>
<section id="_step_4_verifying_the_installation">
<title>Step 4: Verifying the installation</title>
<simpara>As Maven is a Java tool, first of all we need to be sure Java is installed properly. The quickest way to test it is by opening a terminal:</simpara>
<informaltable frame="all"
    rowsep="1" colsep="1">
  
  <tgroup cols="3">
    
    <colspec colname="col_1" colwidth="33*"/>
    
    <colspec colname="col_2" colwidth="33*"/>
    
    <colspec colname="col_3" colwidth="33*"/>
    
    
    <thead>
      
      <row>
        
        <entry align="left" valign="top">OS</entry>
        
        <entry align="left" valign="top">Task</entry>
        
        <entry align="left" valign="top">Command</entry>
        
      </row>
      
    </thead>
    
    <tbody>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Windows</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Open Command Line Console</simpara></entry>
        
        <entry align="left" valign="top"><simpara>c:\&gt; java -version</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Linux</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Open Terminal</simpara></entry>
        
        <entry align="left" valign="top"><simpara>$ java -version</simpara></entry>
        
      </row>
      
      <row>
        
        <entry align="left" valign="top"><simpara>Mac OS X</simpara></entry>
        
        <entry align="left" valign="top"><simpara>Open Terminal</simpara></entry>
        
        <entry align="left" valign="top"><simpara>$ java -version</simpara></entry>
        
      </row>
      
    </tbody>
    
  </tgroup>
</informaltable>
<simpara>In the console, run the following command, to check that Java is properly installed. For example, in a Microsoft Windows environment, you should see something similar to the following:</simpara>
<programlisting language="console" linenumbering="unnumbered">c:\&gt;java -version
java version "1.7.0_10-ea"
Java(TM) SE Runtime Environment (build 1.7.0_10-ea-b13)
Java HotSpot(TM) 64-Bit Server VM (build 23.6-b04, mixed mode)</programlisting>
<simpara>If everything is fine, you can now run the mvn command to check that Maven is installed. You should see something similar to the following output:</simpara>
<programlisting language="JSON" linenumbering="unnumbered">c:\&gt;mvn -version
Apache Maven 3.0.5 (r01de14724cdef164cd33c7c8c2fe155faf9602da; 2013-02-19 14:51:28+0100)
Maven home: C:\Program Files\Apache\apache-maven-3.0.5
Java version: 1.7.0_10-ea, vendor: Oracle Corporation
Java home: C:\Program Files\Java\jdk1.7.0_03\jre
Default locale: en_US, platform encoding: Cp1252
OS name: "windows 7", version: "6.1", arch: "amd64", family: "windows"</programlisting>
<simpara>Now you are ready to work with Maven!</simpara>
</section>
</chapter>
<chapter id="maven-archetype">
<title>ARCHETYPE</title>
<simpara>An archetype is an Apache Maven template (or a blueprint, if you prefer);
it can contain files and folders, any content is allowed; the only mandatory element is the root pom.xml.</simpara>
<simpara>The Maven Archetype Plugin available at <ulink url="http://maven.apache.org/archetype/maven-archetype-plugin/">http://maven.apache.org/archetype/maven-archetype-plugin/</ulink>
delivers all goals that you need to handle this type of artifact:</simpara>

<itemizedlist>
  
    <listitem>
      <simpara>generate: It creates a Maven project, given the archetype&#8217;s coordinates that are passed via the command line.
If coordinates are not specified, Maven will show a list of archetypes available on Maven Central and will interactively
let the user choose which archetype to use.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>create-from-project: It can be executed from the root of any Maven project; it generates an artifact
(in target/generated-source/archetype) containing the archetype with the structure and contents of the current Maven project.</simpara>
      
    </listitem>
  
</itemizedlist>

<simpara>Every Maven Repository can be requested to deliver the complete list of archetypes hosted just by running the following command:</simpara>

<literallayout class="monospaced">mvn archetype:generate \
 -DarchetypeCatalog=http://artifacts.mysite.com/repository/archetype-catalog.xml</literallayout>

<simpara>If the property archetypeCatalog is not set, the Maven Central Repository will be used,
showing a list of more than 700 archetypes (you may want to search "archetype" on <ulink url="http://search.maven.org">http://search.maven.org</ulink> first.</simpara>
</chapter>
<chapter id="maven-pom">
<title>POM</title>
<simpara><ulink url="http://books.sonatype.com/mvnref-book/reference/pom-relationships.html">El POM (Project Object Model):</ulink></simpara>
<simpara>El POM file es el archivo XML de configuraci&#243;n de cualquier proyecto Maven, en &#233;l podemos encontrar informaci&#243;n sobre la versi&#243;n y las dependencias del proyecto as&#237;
como cualquier otra configuraci&#243;n personalizada para el proyecto.</simpara>
<section id="_minimal_pom_xml">
<title>Minimal pom.xml</title>
<simpara>An example of a minimal pom.xml file is as follows:</simpara>
<programlisting language="XML" linenumbering="unnumbered">&lt;project&gt;
   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
   &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;
   &lt;artifactId&gt;app-web&lt;/artifactId&gt;
   &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
   &lt;type&gt;war&lt;/type&gt;
&lt;/project&gt;</programlisting>
<simpara>The pom.xml file is the central configuration file for a Maven project, and it is fundamental to understand it deeply; it contains information about the project structure, metadata, and configuration related with the plugin&#8217;s executions.</simpara>
<simpara>The modelVersion element is in every pom.xml; it represents the pom.xml XML schema version and is set to 4.0.0 for all Maven 2.x and 3.x-based builds.</simpara>
<simpara>The SNAPSHOT suffix in a pom.xml file specifies that the artifacts produced by this build are unreleased, and therefore they considered nightly builds.</simpara>
<simpara>In this section we will introduce the most important elements of a POM; some will not be mentioned, while some others will be briefly introduced.</simpara>
</section>
<section id="_fig_the_project_object_model">
<title>Fig. The Project Object Model</title>
<figure>
<title>The Project Object Model</title>
  <mediaobject>
    <imageobject>
      <imagedata fileref="images/pom-small.png"/>
    </imageobject>
    <textobject><phrase>pom-small</phrase></textobject>
  </mediaobject>
</figure>
<section id="_super_pom">
<title>Super POM</title>
<simpara>Every Maven POM implicitly inherits from Super POM (more information is available at <ulink url="http://maven.apache.org/ref/3.0.5/maven-model-builder/super-pom.html">http://maven.apache.org/ref/3.0.5/maven-model-builder/super-pom.html</ulink>,
which contains all the default values that are needed to perform built-in Maven features, as we will see later in this book. Super POM is provided by the Maven installation.</simpara>
<simpara>It is not intended to be changed as it would cause build portability issues (more information is available at <ulink url="http://www.devx.com/Java/Article/32386">http://www.devx.com/Java/Article/32386</ulink> but
it is definitely interesting to read and investigate it further (more information is available at <ulink url="http://maven.apache.org/guides/introduction/introduction-to-the-pom.html">http://maven.apache.org/guides/introduction/introduction-to-the-pom.html</ulink>
in order to be more confident when using/overriding values in your pom.xml file.</simpara>
</section>
</section>
<section id="_parent_also_known_as_pom_inheritance">
<title>Parent (also known as POM Inheritance)</title>
<simpara>A pom.xml file can define a parent as a pointer to a POM artifact. As a result, all parent&#8217;s Maven configurations will be inherited.</simpara>
<programlisting language="XML" linenumbering="unnumbered">&lt;parent&gt;
   &lt;groupId&gt;com.mycompany.myproject&lt;/groupId&gt;
   &lt;artifactId&gt;my-parent-pom&lt;/artifactId&gt;
   &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
&lt;/parent&gt;</programlisting>
</section>
<section id="_effective_pom">
<title>Effective POM</title>
<simpara>Each execution of a Maven build will first of all merge the current pom.xml definition with the following:</simpara>

<itemizedlist>
  
    <listitem>
      <simpara>Parent POM (and any parent&#8217;s parent POM, if present)</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Super POM</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Enabled profiles</simpara>
      
    </listitem>
  
</itemizedlist>

<simpara>The result is called the effective POM, and it&#8217;s the definition that is taken into consideration when executing Maven builds.</simpara>
<simpara>When writing a pom.xml definition or debugging a Maven build it is crucial to investigate the effective POM in order to
deeply understand what Maven is doing.</simpara>
<simpara>In order to visualize it, simply run the command mvn help:effective-pom, or use an IDE that supports effective POM visualization.</simpara>
<simpara>The Maven Help Plugin available at <ulink url="http://maven.apache.org/plugins/maven-help-plugin">http://maven.apache.org/plugins/maven-help-plugin</ulink> provides more useful goals to debug your Maven logic.</simpara>
</section>
</chapter>
<chapter id="maven-properties">
<title>PROPERTIES</title>

<itemizedlist>
  
    <listitem>
      <simpara>The definition of properties in Maven is as follows:</simpara>
      
    </listitem>
  
</itemizedlist>

<programlisting language="XML" linenumbering="unnumbered">&lt;properties&gt;
   &lt;dbDriver&gt;postgres&lt;/dbDriver&gt;
&lt;/properties&gt;</programlisting>
<simpara>In our example, postgres is the default value.</simpara>

<itemizedlist>
  
    <listitem>
      <simpara>Maven properties are key/value pairs defined in POM that allow defining constants in your build, keeping the syntax clean and readable.
You can use properties to (also partially) define the values of all POM elements: except the POM coordinates (groupId, artifactId, type, version) and a few others.
For example, in multi module projects, you cannot use properties for defining parent coordinates or module name exceptions.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Property values can be passed by the mvn command by appending �D&lt;property name&gt;=&lt;property value&gt; at the end of the line; this feature allows you to provide different build options that are easy to use. For example,
if your application supports different JDBC drivers, you may want to provide the option to run the build appending �DdbDriver=mysql.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara></simpara>
      
    </listitem>
  
    <listitem>
      <simpara>The Super POM defines a list ( available at <ulink url="http://www.sonatype.com/books/mvnref-book/reference/resource-filtering-sect-properties.html">http://www.sonatype.com/books/mvnref-book/reference/resource-filtering-sect-properties.html</ulink> ) of properties that you can use in your POM; the most used can be divided into the following:</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara>POM information: All the coordinates of the current project can be accessed via property, including all the Maven Plugin configurations</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Environment properties: Many environment variables, such as the hostname or the JAVA_HOME</simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
    <listitem>
      <simpara>Our example will be as follows:</simpara>
      
    </listitem>
  
</itemizedlist>

<programlisting language="XML" linenumbering="unnumbered">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;book.simasoft.co&lt;/groupId&gt;
        &lt;version&gt;4.0.0-SNAPSHOT&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</programlisting>
<section id="_maven_properties">
<title>Maven Properties:</title>

<itemizedlist>
  
    <listitem>
      <simpara><ulink url="http://books.sonatype.com/mvnref-book/reference/resource-filtering-sect-properties.html">Maven Properties</ulink></simpara>
      
    </listitem>
  
    <listitem>
      <simpara><ulink url="http://docs.codehaus.org/display/MAVENUSER/MavenPropertiesGuide">MavenPropertiesGuide</ulink></simpara>
      
    </listitem>
  
</itemizedlist>

</section>
</chapter>
<chapter id="maven-artifacts">
<title>ARTIFACTS</title>
<simpara>An artifact in a Maven context is a file that is (or has been) produced by a build execution and represents an application binary (of a specific version) that is subject to a lifecycle.</simpara>
<simpara>An artifact can have different purposes, listed as follows:</simpara>

<itemizedlist>
  
    <listitem>
      <simpara><emphasis role="strong">A project&#8217;s library:</emphasis> JAR, WAR, EAR, ZIP, or any file extension you may want to integrate in your build.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">Maven plugin:</emphasis> A JAR application containing the logic to execute build executions.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Maven archetype:* A JAR application containing the logic to create a Maven project with a pre-defined file and folder content. Archetypes will be introduced in the next section.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Project descriptor:* As we&#8217;ll see shortly, a POM is itself an artifact.</simpara>
      
    </listitem>
  
</itemizedlist>

<simpara>The following coordinates uniquely identify an artifact:</simpara>

<itemizedlist>
  
    <listitem>
      <simpara><emphasis role="strong">groupId:</emphasis> This coordinate represents the group, company, team, organization, and/or project related with the given artifact.
The convention is the same as that of the Java packages (more information is available at <ulink url="http://docs.oracle.com/javase/tutorial/java/package/namingpkgs.html">http://docs.oracle.com/javase/tutorial/java/package/namingpkgs.html</ulink>.
For example, projects from Apache Software Foundation would have a groupId coordinate that starts with org.apache. A good rule of thumb for deciding the g
ranularity of groupId is by following the project&#8217;s structure. For example, com.mycompany.myproject.persistence, com.mycompany.myproject.api, and so on.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">artifactId:</emphasis> This coordinate represents the name of the project (or module) related with the given artifact. artifactId must not contain any version-related information;
if the artifact is a module, it is advised to join the project name with the module one (that is, commons-logging).
Using only lowercase letters and the dash (-) as a separator is a clear and consolidated strategy. Good examples for artifactID are maven-core,commons-math, and log4j-over-sl4j.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">type:</emphasis> The extension (and filetype) of the artifact; the default type is JAR, but it can have any extension, such as WAR, EAR, or any other.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">version:</emphasis> This coordinate is a specific release of a project. It consists of a group of literals separated by dots; for example, 1.0, 2.0.1-RC1, and 2.0.0.1-alpha-2.
If the version ends with the SNAPSHOT literal, it means that the artifact is a nightly build and therefore not released yet.
In order to take full advantage of Maven&#8217;s version management, every work in progress project should have a SNAPSHOT version; we will discuss this later.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>classifier:* This is an additional coordinate to handle two (or more) artifacts having the same coordinates but containing a different content;
empty by default. For example, Maven identifies binary and source (source artifacts are archives containing the source code of your application,
for more on this you can visit <ulink url="http://maven.apache.org/plugin-developers/cookbook/attach-source-javadoc-artifacts.html">http://maven.apache.org/plugin-developers/cookbook/attach-source-javadoc-artifacts.html</ulink> artifacts using the same coordinates, but with different classifiers.</simpara>
      
    </listitem>
  
</itemizedlist>

<simpara>For more information about naming conventions, check the official Maven documentation available at <ulink url="http://maven.apache.org/guides/mini/guide-naming-conventions.html">http://maven.apache.org/guides/mini/guide-naming-conventions.html</ulink></simpara>
<section id="_coordinates_uniquely_identify_an_artifact">
<title>Coordinates uniquely identify an artifact</title>

<itemizedlist>
  
    <listitem>
      <simpara>&lt;groupId&gt; El id del grupo al que pertenece el proyecto.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>&lt;artifactId&gt; El id del artifact o proyecto (en la mayor�a de los casos el nombre del proyecto). Identificador particular de una librer�a en particular</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>&lt;version&gt; La versi&#243;n del artifact en el grupo especificado.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>&lt;dependency&gt; Aqu� se colocar�n todas las dependencias del proyecto.</simpara>
      
    </listitem>
  
</itemizedlist>

<simpara><emphasis>El POM requiere que estos valores est&#233;n definidos ya que esta es la sintaxis en que Maven los identifica dentro de su repositorio.</emphasis></simpara>
</section>
</chapter>
<chapter id="maven-dependencias">
<title>DEPENDENCIAS</title>

<itemizedlist>
  
    <listitem>
      <simpara>Una dependencia es una referencia en el POM de la librer&#237;a que se desea incluir en el proyecto.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>A Maven dependency is a pointerdefined in a pom.xml file to an artifact that needs to be included as a project&#8217;s library. It must of course define the artifact&#8217;s coordinates in order to uniquely identify it:</simpara>
      
    </listitem>
  
</itemizedlist>

<programlisting language="XML" linenumbering="unnumbered">&lt;dependencies&gt;
   &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
      &lt;version&gt;3.2.2.RELEASE&lt;/version&gt;
   &lt;/dependency&gt;
&lt;/dependencies&gt;</programlisting>

<itemizedlist>
  
    <listitem>
      <simpara>Dependencies are transitive; if A depends on B and B depends on C, then A depends on C. In order to exclude a transitive dependency from your build, you can define exclusions as follows:</simpara>
      
    </listitem>
  
</itemizedlist>

<programlisting language="XML" linenumbering="unnumbered">&lt;dependencies&gt;
   &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
      &lt;version&gt;3.2.2.RELEASE&lt;/version&gt;
      &lt;exclusions&gt;
        &lt;exclusion&gt;
            &lt;groupId&gt;log4j&lt;/groupId&gt;
            &lt;artifactId&gt;log4j&lt;/artifactId&gt;
        &lt;exclusion&gt;
      &lt;/exclusions&gt;
   &lt;/dependency&gt;
&lt;/dependencies&gt;</programlisting>
<simpara>Additionally, a dependency can define a &lt;scope&gt; element, but they will be introduced in the Maven lifecycle section.</simpara>
<section id="__mbito_de_las_dependencias">
<title>&#193;mbito de las dependencias:</title>

<itemizedlist>
  
    <listitem>
      <simpara><emphasis role="strong">Compile:</emphasis> Es el &#225;mbito por defecto. Las dependencias est&#225;n disponibles en el proyecto y en sus proyectos dependientes.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">Provided:</emphasis> Se espera que el JDK, la aplicaci&#243;n o el contenedor provea la dependencia.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">Runtime:</emphasis> La dependencia no es requerida en tiempo de compilaci&#243;n pero s&#237; para la ejecuci&#243;n.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">Test:</emphasis> Son dependencias que son requeridas solo cuando se compila y ejecuta los test.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">System:</emphasis> Similar a provided pero se le debe indicar el jar que contiene la dependencia</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">Import:</emphasis> Solo es usado en una dependencia del tipo POM en la secci&#243;n . Indica que el POM utilizado debe ser remplazado con las dependencias que &#233;ste tenga en su secci&#243;n</simpara>
      
    </listitem>
  
</itemizedlist>

<programlisting language="XML" linenumbering="unnumbered">&lt;dependency&gt;
   &lt;groupId&gt;org.jboss.seam&lt;/groupId&gt;
   &lt;artifactId&gt;seam-bom&lt;/artifactId&gt;
   &lt;version&gt;${seam.version}&lt;/version&gt;
   &lt;scope&gt;import&lt;/scope&gt; Ambito
   &lt;type&gt;pom&lt;/type&gt;
&lt;/dependency&gt;</programlisting>
<simpara>Los objetos en el repositorio se identifican mediante 3 etiquetas: groupId,artifactId,version</simpara>
</section>
</chapter>
<chapter id="maven-plugins">
<title>PLUGINS</title>
<simpara>A Maven plugin is a JAR Maven artifact containing Java classes that implement one or more goals using the Maven Plugin API (more information is available at <ulink url="http://maven.apache.org/ref/3.0.5/maven-plugin-api">http://maven.apache.org/ref/3.0.5/maven-plugin-api</ulink> ), and declares a public short name (that is, tomcat7x).</simpara>
<programlisting language="XML" linenumbering="unnumbered">&lt;build&gt;
   &lt;plugins&gt;
      &lt;plugin&gt;
         &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;
         &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;
         &lt;version&gt;2.1&lt;/version&gt;
         &lt;configuration&gt;
            &lt;url&gt;http://127.0.0.1:8080/manager&lt;/url&gt;
            &lt;server&gt;Tomcat&lt;/server&gt;
            &lt;path&gt;/app-web&lt;/path&gt;
         &lt;/configuration&gt;
      &lt;/plugin&gt;
   &lt;/plugins&gt;
&lt;/build&gt;</programlisting>
<simpara><ulink url="http://maven.apache.org/guides/mini/guide-configuring-plugins.html">Guide to Configuring Plug-ins</ulink></simpara>
<section id="_goals">
<title>Goals</title>
<simpara>The goal identifies a build task; it has a unique name (that is, run) within the same plugin. It can access and change the POM and provide a wide range of operations,
from zipping a folder to performing a remote deployment on a Tomcat server.</simpara>

<itemizedlist>
  
    <listitem>
      <simpara>A goal can be executed by the mvn command using the following syntax:</simpara>
      

<literallayout class="monospaced">&lt;plugin_shortname&gt;:&lt;goal_name&gt;, for example mvn tomcat7x:run</literallayout>


      
    </listitem>
  
    <listitem>
      <simpara>A goal can be invoked by the lifecycle phase; you will read more about it in the Maven lifecycle section.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>All plugins having an artifactId coordinate starting with maven are directly supported by Maven projects (more information is available at <ulink url="http://maven.apache.org/plugins/">http://maven.apache.org/plugins/</ulink>.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>In order to understand how to use a Maven Plugin, search for its official documentation page; the Usage page available at <ulink url="http://tomcat.apache.org/maven-plugin-2.0/tomcat7-maven-plugin/usage.html">http://tomcat.apache.org/maven-plugin-2.0/tomcat7-maven-plugin/usage.html</ulink>
explains how to add the plugin to your build;</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>The Goals page available at <ulink url="http://tomcat.apache.org/maven-plugin-2.0/tomcat7-maven-plugin/plugin-info.html">http://tomcat.apache.org/maven-plugin-2.0/tomcat7-maven-plugin/plugin-info.html</ulink> lists all goals and parameters that you can set.</simpara>
      
    </listitem>
  
</itemizedlist>

</section>
</chapter>
<chapter id="maven-profiles">
<title>PROFILES</title>
<simpara>A Maven profile is a POM element that contains specific POM configurations for specific cases.
A profile can for example be used to define environment specific configurations and build behaviors, as suggested by the following code snippet:</simpara>
<simpara>Although profiles may be considered an advanced topic, they are widely used by the Maven community;
it is crucial to know at least what they are in order to fully understand a Maven build.</simpara>
<programlisting language="XML" linenumbering="unnumbered">&lt;profiles&gt;
    &lt;profile&gt;
        &lt;id&gt;postgres&lt;/id&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
              &lt;groupId&gt;book.simasoft.co&lt;/groupId&gt;
              &lt;version&gt;4.0.0-SNAPSHOT&lt;/version&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/profile&gt;
&lt;/profiles&gt;</programlisting>
<simpara>Profiles are activated by invocation, appending -P&lt;profile name&gt; to your mvn command; additionally, profiles can declare their own <emphasis role="strong">&lt;activation&gt;</emphasis> rules.</simpara>
<simpara>When activated, profiles are one by one, following the definition ordering merged with the main pom.xml definition into the effective POM.</simpara>
<simpara>The effective POM will be the result of the sum of the main pom.xml features and the profile ones.</simpara>
<simpara>There&#8217;s much more available at <ulink url="http://books.sonatype.com/mvnref-book/reference/profiles.html">http://books.sonatype.com/mvnref-book/reference/profiles.html</ulink> to know
about profiles in order to exploit all their potentials.</simpara>
</chapter>
<chapter id="maven-repositorios">
<title>REPOSITORIOS</title>

<itemizedlist>
  
    <listitem>
      <simpara>A Maven Repository is a folder with a specific layout that can optionally be located remotely:</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>En el repositorio encontramos los JAR, WAR, etc en una jerarqu�a de carpetas que siguen el mismo concepto: groupId, artifactId, version.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>El repositorio es un mecanismo espacial de Maven para organizar los ficheros Jar y otras dependencias que utilizan tus aplicaciones. (Maven tambi�n utiliza el t�rmino artefacto para referirse a las dependencias).</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>El repositorio esencialmente es una carpeta con un estructura espec�fica para Maven, y soluciona dos problemas:</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara><emphasis role="strong">Primero</emphasis>, proporciona una localizaci�n centralizada para todos los ficheros Jar y otras dependencias que necesita tu proceso de construcci�n.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">Segundo</emphasis>, es un ayuda con los problemas de versiones proponiendo una convenci�n de nombrado.</simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
</itemizedlist>

<programlisting language="XML" linenumbering="unnumbered">&lt;repositories&gt;
   &lt;repository&gt;
      &lt;id&gt;my-custom-repo&lt;/id&gt;
      &lt;url&gt;http://artifacts.mysite.com/repository&lt;/url&gt;
   &lt;/repository&gt;
&lt;/repositories&gt;</programlisting>

<itemizedlist>
  
    <listitem>
      <simpara>The Repository layout is a key convention in Maven that allows you to uniquely locate an artifact:</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara>&lt;repository_url&gt;/&lt;groupId&gt;/&lt;artifactId&gt;/&lt;version&gt;/&lt;artifactId&gt;-&lt;classifier&gt;-&lt;version&gt;.&lt;type&gt;</simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
    <listitem>
      <simpara>For example, you can have the following coordinates for the preceding artifact:</simpara>
      
    </listitem>
  
</itemizedlist>

<programlisting language="XML" linenumbering="unnumbered">groupId: org.apache.solr
artifactId: solr
version: 4.3.0
type: .war</programlisting>

<itemizedlist>
  
    <listitem>
      <simpara>For a remote URL, the Repository URL can be:</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara><ulink url="http://repo.maven.apache.org/maven2">http://repo.maven.apache.org/maven2</ulink></simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
    <listitem>
      <simpara>The layout key will hence be:</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara><ulink url="http://repo.maven.apache.org/maven2/org/apache/solr/solr/4.3.0/solr-4.3.0.war">http://repo.maven.apache.org/maven2/org/apache/solr/solr/4.3.0/solr-4.3.0.war</ulink></simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
    <listitem>
      <simpara>For a local URL, the Repository URL can be:</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara>file:///Users/mau/.m2/repository</simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
    <listitem>
      <simpara>The layout key will hence be:</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara>file:///Users/mau/.m2/repository/org/apache/solr/solr/4.3.0/solr-4.3.0.war</simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
    <listitem>
      <simpara>A Maven Repository is the source and the destination of artifacts in the following scenarios:</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara><emphasis role="strong">Source:</emphasis> When a Maven build depends on one or more artifacts, the Maven Repository is the place where these files are resolved and downloaded from</simpara>
      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">Destination:</emphasis> When a Maven build produces one or more artifacts, it may be optionally deployed on a Maven Repository</simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
    <listitem>
      <simpara>A Maven Repository can restrict the download/upload artifact operations depending whether the artifact&#8217;s version is a SNAPSHOT literal or not.
This way, you can easily define nightly builds, repositories, and define tailored maintenance operations (that is, remove SNAPSHOT artifacts after 30 days).</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>SNAPSHOT artifacts are a special case for Maven Repositories:</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara>When uploaded, the SNAPSHOT literal of the artifact name will be replaced with the current timestamp (more information is available at <ulink url="http://docs.oracle.com/javase/6/docs/api/java/sql/Timestamp.html">http://docs.oracle.com/javase/6/docs/api/java/sql/Timestamp.html</ulink></simpara>
      
    </listitem>
  
    <listitem>
      <simpara>When downloaded, the revolved artifact will be the one with the highest timestamp (most recently uploaded amongst all other SNAPSHOT artifacts having the same coordinates)</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>The Super POM defines two very special repositories:</simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
</itemizedlist>

<section id="_tipos_de_repositorios_de_maven">
<title>Tipos de Repositorios de Maven</title>
<simpara>Maven maneja 3 niveles de repositorio:</simpara>

<itemizedlist>
  
    <listitem>
      <simpara><emphasis role="strong">Repositorio Local:</emphasis></simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara>El repositorio local normalmente conocido como .m2 se guarda localmente en nuestra pc</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>This repository is a local folder located in <subscript>/.m2/repository (</subscript> means user home in Linux, Unix, and OS X environments).
The Local Repository works as a cache for all remotely-fetched artifacts: every time Maven downloads an artifact for you, it will do it only once.
This rule does not apply to -SNAPSHOT artifacts, since these versions are supposed to change frequently; in this case, the build will ask the Maven Repository
whether the SNAPSHOT artifact was updated since the last fetch.</simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">Repositorio Empresarial:</emphasis></simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara>Maven Central Repository: This is a remote Maven repository containing the official releases of Maven core plugins which deliver all built in functionalities of Apache Maven and
the biggest collection of Java artifacts in the world (Java.net and Oracle are hosted here, and many other companies, projects, and communities).
Maven Central is open ( more information is available at <ulink url="http://www.sonatype.org/central/participate">http://www.sonatype.org/central/participate</ulink> ) to the contribution of anyone who wants to share their artifacts with the rest of the world.
You can browse Maven Central using <ulink url="http://search.maven.org">http://search.maven.org</ulink> (shown in the following screenshot). Maven Central is hosted by Sonatype (more information is available at <ulink url="http://www.sonatype.org/">http://www.sonatype.org/</ulink>.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>El repositorio Empresarial tiene la misma estructura que el repositorio local con la diferencia que almacena librer&#237;as de uso compartido a nivel de red.
Los repositorios empresariales normalmente se utilizan cuando se maneja un equipo de desarrolladores que trabaja sobre un conjunto variado de proyectos,
los cuales normalmente tienen interdependencia entre ellos y sus librer&#237;as.</simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
    <listitem>
      <simpara><emphasis role="strong">Repositorio Global:</emphasis></simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara>Los repositorios globales son repositorios p&#250;blicos que almacenan librer&#237;as de uso compartido, como por ejemplo el repositorio mismo de Maven o el repositorio p&#250;blico de JBoss o maven central.</simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
</itemizedlist>

</section>
</chapter>
<chapter id="maven-recursos">
<title>RECURSOS</title>
<section id="_generalidades">
<title>GENERALIDADES</title>

<itemizedlist>
  
    <listitem>
      <simpara>Generar el proyecto:</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara>mvn archetype:generate -DgroupId=com.mycompany.demo -DartifactId=myapp -DarchetypeArtifactId=maven-archetype-quickstart-DinteractiveMode=false</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Plugin maven-shade-plugin</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara>Este plugin permite configurar Maven para que al empaquetar el proyecto JAR con sus dependencias y asi poderlo ejecutar con la orden: java -jar target/myapp-1.0-SNAPSHOT.jar</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>Para lo anteror debemos agregar la secci�n build con el respectivo plugin en el archivo: pom.xml</simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
</itemizedlist>

<programlisting language="XML" linenumbering="unnumbered">&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
      &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;
      &lt;version&gt;1.3.1&lt;/version&gt;
      &lt;executions&gt;
        &lt;execution&gt;
        &lt;phase&gt;package&lt;/phase&gt;
        &lt;goals&gt;
          &lt;goal&gt;shade&lt;/goal&gt;
        &lt;/goals&gt;
        &lt;configuration&gt;
          &lt;minimizeJar&gt;true&lt;/minimizeJar&gt;
          &lt;transformers&gt;
           &lt;transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"&gt;
             &lt;manifestEntries&gt;
               &lt;Main-Class&gt;com.mycompany.demo.App&lt;/Main-Class&gt;
             &lt;/manifestEntries&gt;
           &lt;/transformer&gt;
          &lt;transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/&gt;
          &lt;/transformers&gt;
        &lt;/configuration&gt;
        &lt;/execution&gt;
      &lt;/executions&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;</programlisting>

<itemizedlist>
  
    <listitem>
      <simpara>Para ejecutar el programa java sin utilizar maven:</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara>javac -cp mongo.jar;. App.java  // Driver de mongo.jar debe estar en el mismo directorio.</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>java -cp mongo.jar;. App</simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
    <listitem>
      <simpara>Ejemplos para compilar y ejecutar el programa</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara>mvn compile exec:java -Dexec.mainClass=com.tengen.Week1Homework3</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>mvn compile exec:java -Dexec.mainClass=com.tengen.Week1Homework4</simpara>
      
    </listitem>
  
    <listitem>
      <simpara>java -jar target/myapp-1.0-SNAPSHOT.jar</simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
</itemizedlist>

</section>
<section id="_links">
<title>LINKS:</title>

<itemizedlist>
  
    <listitem>
      <simpara>Referencias</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara><ulink url="http://books.sonatype.com/mvnref-book/reference/">Maven: The Complete Reference</ulink></simpara>
      
    </listitem>
  
    <listitem>
      <simpara><ulink url="http://www.genbetadev.com/java-j2ee/introduccion-a-maven">Introducci&#243;n a Maven</ulink></simpara>
      
    </listitem>
  
    <listitem>
      <simpara><ulink url="http://www.adictosaltrabajo.com/tutoriales/tutoriales.php?pagina=maven">Maven, nunca antes result&#243; tan f&#225;cil compilar, empaquetar</ulink></simpara>
      
    </listitem>
  
    <listitem>
      <simpara><ulink url="https://community.jboss.org/wiki/MavenGettingStarted-Users">Maven Getting Started - Users</ulink></simpara>
      
    </listitem>
  
    <listitem>
      <simpara><ulink url="http://maven.apache.org/guides/introduction/">introduction</ulink></simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
    <listitem>
      <simpara>Maven Archetypes</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara><ulink url="http://maven.apache.org/archetype/maven-archetype-bundles/">Maven Archetypes</ulink></simpara>
      
    </listitem>
  
    <listitem>
      <simpara><ulink url="http://maven.apache.org/guides/mini/guide-creating-archetypes.html">Guide to Creating Archetypes</ulink></simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
    <listitem>
      <simpara>Repositorios</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara><ulink url="https://repository.jboss.org/nexus/content/groups/public/">The JBoss Community public repository is a composite repository</ulink></simpara>
      
    </listitem>
  
    <listitem>
      <simpara><ulink url="http://vimeo.com/12620367">Maven Repository Magic</ulink></simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
    <listitem>
      <simpara>Pluins</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara><ulink url="http://maven.apache.org/plugins/maven-resources-plugin/">Maven Resources Plugin</ulink></simpara>
      
    </listitem>
  
    <listitem>
      <simpara><ulink url="http://chuwiki.chuidiang.org/index.php?title=Hacer_un_plugin_para_Maven">Hacer un plugin para Maven</ulink></simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
    <listitem>
      <simpara>Properties</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara><ulink url="http://docs.codehaus.org/display/MAVENUSER/MavenPropertiesGuide">MavenPropertiesGuide</ulink></simpara>
      
    </listitem>
  
    <listitem>
      <simpara><ulink url="http://books.sonatype.com/mvnref-book/reference/resource-filtering-sect-properties.html">Maven Properties</ulink></simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
    <listitem>
      <simpara>Dependencias</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara><ulink url="http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html">Introduction to the Dependency Mechanism</ulink></simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
    <listitem>
      <simpara>POM</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara><ulink url="http://maven.apache.org/guides/introduction/introduction-to-the-pom.html">Introduction to the POM</ulink></simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
    <listitem>
      <simpara>Libros</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara><ulink url="https://ssl.safaribooksonline.com/trial?iid=anon-home-redirect">Safari Books Online</ulink></simpara>
      
    </listitem>
  
    <listitem>
      <simpara><ulink url="http://www.amazon.com/books-used-books-textbooks/b/ref=sa_menu_bo?ie=UTF8&amp;node=283155">Amazon</ulink></simpara>
      
    </listitem>
  
    <listitem>
      <simpara><ulink url="http://my.safaribooksonline.com/book/operating-systems-and-server-administration/apache/9781782167600">Instant Apache Maven Starter - ISBN: 978-1-78216-760-0</ulink></simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
    <listitem>
      <simpara>Varios</simpara>
      

<itemizedlist>
  
    <listitem>
      <simpara><ulink url="http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html">Introduction to the Standard Directory Layout</ulink></simpara>
      
    </listitem>
  
</itemizedlist>


      
    </listitem>
  
</itemizedlist>

</section>
</chapter>
<chapter id="maven-glosario">
<title>GLOSARIO MAVEN</title>
<variablelist>
<varlistentry>
<term>Maven</term>
<listitem>
<simpara>Es una herramienta para la gesti�n de proyectos de software, que se basa en el concepto de POM (Proyect Object Model).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Arquetipo</term>
<listitem>
<simpara>Es una plantilla,capaz de generar una estructura de directorios y archivos.</simpara>
</listitem>
</varlistentry>
</variablelist>
</chapter>
</book>