[[maven-artifacts]]

////
a=&#225; e=&#233; i=&#237; o=&#243; u=&#250;

A=&#193; E=&#201; I=&#205; O=&#211; U=&#218;

n=&#241; N=&#209;
////

== ARTIFACTS

An artifact in a Maven context is a file that is (or has been) produced by a build execution and represents an application binary (of a specific version) that is subject to a lifecycle.

An artifact can have different purposes, listed as follows:

* *A project's library:* JAR, WAR, EAR, ZIP, or any file extension you may want to integrate in your build.

* *Maven plugin:* A JAR application containing the logic to execute build executions.

* Maven archetype:* A JAR application containing the logic to create a Maven project with a pre-defined file and folder content. Archetypes will be introduced in the next section.

* Project descriptor:* As we'll see shortly, a POM is itself an artifact.

The following coordinates uniquely identify an artifact:

* *groupId:* This coordinate represents the group, company, team, organization, and/or project related with the given artifact.
  The convention is the same as that of the Java packages (more information is available at http://docs.oracle.com/javase/tutorial/java/package/namingpkgs.html.
  For example, projects from Apache Software Foundation would have a groupId coordinate that starts with org.apache. A good rule of thumb for deciding the g
  ranularity of groupId is by following the project's structure. For example, com.mycompany.myproject.persistence, com.mycompany.myproject.api, and so on.

* *artifactId:* This coordinate represents the name of the project (or module) related with the given artifact. artifactId must not contain any version-related information;
  if the artifact is a module, it is advised to join the project name with the module one (that is, commons-logging).
  Using only lowercase letters and the dash (-) as a separator is a clear and consolidated strategy. Good examples for artifactID are maven-core,commons-math, and log4j-over-sl4j.

* *type:* The extension (and filetype) of the artifact; the default type is JAR, but it can have any extension, such as WAR, EAR, or any other.

* *version:* This coordinate is a specific release of a project. It consists of a group of literals separated by dots; for example, 1.0, 2.0.1-RC1, and 2.0.0.1-alpha-2.
  If the version ends with the SNAPSHOT literal, it means that the artifact is a nightly build and therefore not released yet.
  In order to take full advantage of Maven's version management, every work in progress project should have a SNAPSHOT version; we will discuss this later.

* classifier:* This is an additional coordinate to handle two (or more) artifacts having the same coordinates but containing a different content;
  empty by default. For example, Maven identifies binary and source (source artifacts are archives containing the source code of your application,
  for more on this you can visit http://maven.apache.org/plugin-developers/cookbook/attach-source-javadoc-artifacts.html artifacts using the same coordinates, but with different classifiers.

For more information about naming conventions, check the official Maven documentation available at http://maven.apache.org/guides/mini/guide-naming-conventions.html

==== Coordinates uniquely identify an artifact

* <groupId> El id del grupo al que pertenece el proyecto.
* <artifactId> El id del artifact o proyecto (en la mayor&#237;a de los casos el nombre del proyecto). Identificador particular de una librer&#237;a en particular
* <version> La versi&#243;n del artifact en el grupo especificado.
* <dependency> Aqu&#237; se colocar&#225;n todas las dependencias del proyecto.

_El POM requiere que estos valores est&#233;n definidos ya que esta es la sintaxis en que Maven los identifica dentro de su repositorio._



