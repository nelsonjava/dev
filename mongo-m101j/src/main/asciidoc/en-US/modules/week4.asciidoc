[[mongo-m101j-week4]]

////
a=&#225; e=&#233; i=&#237; o=&#243; u=&#250;

A=&#193; E=&#201; I=&#205; O=&#211; U=&#218;

n=&#241; N=&#209;
////


==== WEEK 4 - PERFORMANCE

===== https://www.youtube.com/watch?feature=player_embedded&v=MA0QpaGggY8[Introduction]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=kkIAqyqYOCc[Indexes]

* Database Performance

Quiz: Indexes

Which optimization will typically have the greatest impact on the performance of a database.

* Adding more memory so that the working set fits in memory.

* Adding a faster drive so that operations that hit disk will happen more quickly.

* Replacing your CPU with a faster one (say one 2x as fast)

* Adding appropriate indexes on large collections so that only a small percentage of queries need to scan the collection. *OK*


===== https://www.youtube.com/watch?feature=player_emb|[Creating Indexes]

* use school

* db.students.find().pretty()

* db.studentes.find({'student_id' : 5})

* db.studentes.findOne({'student_id' : 5})

* db.studentes.findOne({'student_id' : 5000000})

* db.studentes.find({'student_id' : 5000000})

* db.studentes.ensureIndex({student_id : 1})

* db.studentes.find({'student_id' : 5000000}).pretty()

* db.studentes.find({'student_id' : 7000000}).pretty()

* db.studentes.find({'class' : 7000000}).pretty()

* db.studentes.ensureIndex({student_id:1,class:-1})

Quiz: Creating Indexes

Please provide the mongo shell command to add an index to a collection named students, having the index key be class, student_name.

Answer:
[source, console]
----
db.students.ensureIndex({class:1, student_name:1})
----

===== https://www.youtube.com/watch?feature=player_embedded&v=hH7kYu_-FXg[Discovering indexes]

* use school

* db.system.indexes.find()

* db.students.getIndexes()

* db.students.dropIndex({'student_id':1})

* db.students.getIndexes()

* db.studentes.find({'student_id' : 7000000}).pretty()

* use test

* db.system.indexes.find()

===== https://www.youtube.com/watch?feature=player_embedded&v=JO_puGONaLc[Multikey Indexes]

* {tags:["cycling","tennis","football"]}
  {categories:["sport","hobbies"]}

* ensureIndex({tags:1})

* use test

* db.bbb.insert({a:1, b:1})

* db.bbb.ensureIndex({a:1,b:1})

* db.bbb.insert({a:[1,2,3], b:1})

* db.bbb.insert({a:5,b:[1,2,3]})

* db.bbb.getIndexes()

* db.bbb.insert({a:[1,2,4],b:[1,2,3]}) - cannot index parallel [b] [a]

Quiz: Multikey Indexes

Suppose we have a collection foo that has an index created as follows:

[source, console]
----
db.foo.ensureIndex({a:1, b:1})
----

Which of the following inserts are valid to this collection?

db.foo.insert({a:["apples","oranges"], b:"grapes"}) *OK*

db.foo.insert({a:"grapes", b:"oranges"}) *OK*

db.foo.insert({a:"grapes", b:[8,9,10]}) *OK*

db.foo.insert({a:[1,2,3], b:[5,6,7]})


===== https://www.youtube.com/watch?feature=player_embedded&v=mPSGG2p33RQ[Multikey Continued]

* db.people.find().pretty()

* db.people.ensureIndex({'addresses.tag':1})

* db.people.ensureIndex({'addresses.phones':1})

* db.people.getIndexes()

===== https://www.youtube.com/watch?feature=player_embedded&v=764mQG1iL8E[Index Creation option, Unique]

* db.stuff.insert({thing:'pear'})

* db.stuff.ensureIndex({'thing':1})

* db.stuff.insert({thing:'pear'})

* db.stuff.insert({thing:'apple'})

* db.stuff.getIndexes()

* db.stuff.dropIndex({'thing':1})

* db.stuff.ensureIndex({'thing':1},{unique:true}) - E11000 duplicate key error: test.stuff.$thin_1 dup key: { : "pear"}

* db.stuff.remove({_id:ObjectId("50a...")}) - Delete pear

* db.stuff.ensureIndex({'thing':1},{unique:true})

* db.stuff.getIndexes()

* db.stuff.find()

* db.stuff.insert({thing:'pear'}) - E11000 duplicate key error index: test.stuff.$thing_1 dup key: { : "apple"}

* db.stuff.insert({_id:1, b:1})

* db.stuff.insert({_id:1, b:2})  - E11000 duplicate key error index: test.stuff.$_id_ dup key: { : 1.0}

Quiz: Index Creation option, Unique

Please provide the mongo shell command to add a unique index to the collection students on the keys student_id, class_id.

Answer:
[source, console]
----
db.students.ensureIndex({student_id:1, class_id:1}, {unique:true})
----

===== https://www.youtube.com/watch?feature=player_embedded&v=YJaWPXNGvoU[Index Creation, Removing Dups]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=s4sYwLndtTI[Index Creation, Sparse]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=28wCvoXmY7A[Index Creation, Background]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=inmABt5RKf0[Using Explain]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=Lwms58Y_3Jc[When is an index used?]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=oywrqWNY46s[How large is your index?]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=xiujksUfzUA[Index Cardinality]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=On8HHR1agsI[Index Selectivity]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=ksOn-SkaIcg[Hinting an Index]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=dlKcfo7WtGU[Hinting in Java]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=1sADN-NKwhY[Efficiency of Index Use]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=UKUDYqNVL6I[Geospatial Indexes]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=vY3_H4MzkIY[Geospacial Spherical]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=aWuvC-O7Qkk[Logging Slow Queries]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=pN1Yhrup9-I[Profiling]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=D9YLXgy7NYo[Mongotop]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=eLWQO_AJmrI[Mongostat]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=BDxT-VZdYqc[Sharding Overview]

.

===== https://www.youtube.com/watch?feature=player_embedded&v=0tpXSPgYk4I[HW 4.1]

Homework: HW 4.1

Suppose you have a collection with the following indexes:

[source, console]
----
> db.products.getIndexes()
[
	{
		"v" : 1,
		"key" : {
			"_id" : 1
		},
		"ns" : "store.products",
		"name" : "_id_"
	},
	{
		"v" : 1,
		"key" : {
			"sku" : 1,
			"unique" : true
		},
		"ns" : "store.products",
		"name" : "sku_1_unique_true"
	},
	{
		"v" : 1,
		"key" : {
			"price" : -1
		},
		"ns" : "store.products",
		"name" : "price_-1"
	},
	{
		"v" : 1,
		"key" : {
			"description" : 1
		},
		"ns" : "store.products",
		"name" : "description_1"
	},
	{
		"v" : 1,
		"key" : {
			"category" : 1,
			"brand" : 1
		},
		"ns" : "store.products",
		"name" : "category_1_brand_1"
	},
	{
		"v" : 1,
		"key" : {
			"reviews.author" : 1
		},
		"ns" : "store.products",
		"name" : "reviews.author_1"
	}
----

Which of the following queries can utilize an index. Check all that apply. https://www.youtube.com/watch?feature=player_embedded&v=ecMrwMMBqIg[Answer]

* db.products.find({'brand':"GE"})

* db.products.find({'brand':"GE"}).sort({price:1}) *OK*

* db.products.find({$and:[{price:{$gt:30}},{price:{$lt:50}}]}).sort({brand:1}) *OK*

* db.products.find({brand:'GE'}).sort({category:1, brand:-1}).explain()



===== https://www.youtube.com/watch?feature=player_embedded&v=Zz8TerE95Ss[HW 4.2]

Homework: HW 4.2

Suppose you have a collection called tweets whose documents contain information about the created_at time of the tweet and the user's followers_count
at the time they issued the tweet. What can you infer from the following explain output?

[source, console]
----
db.tweets.find({"user.followers_count":{$gt:1000}}).sort({"created_at" : 1 }).limit(10).skip(5000).explain()
{
        "cursor" : "BtreeCursor created_at_-1 reverse",
        "isMultiKey" : false,
        "n" : 10,
        "nscannedObjects" : 46462,
        "nscanned" : 46462,
        "nscannedObjectsAllPlans" : 49763,
        "nscannedAllPlans" : 49763,
        "scanAndOrder" : false,
        "indexOnly" : false,
        "nYields" : 0,
        "nChunkSkips" : 0,
        "millis" : 205,
        "indexBounds" : {
                "created_at" : [
                        [
                                {
                                        "$minElement" : 1
                                },
                                {
                                        "$maxElement" : 1
                                }
                        ]
                ]
        },
        "server" : "localhost.localdomain:27017"
}
----

https://www.youtube.com/watch?feature=player_embedded&v=LrsbQkNztMY[Answer]

* This query performs a collection scan. *OK*

* The query uses an index to determine the order in which to return result documents. *OK*

* The query uses an index to determine which documents match.

* The query returns 46462 documents.

* The query visits 46462 documents. *OK*

* The query is a "covered index query".


===== https://www.youtube.com/watch?feature=player_embedded&v=K-oXNC7voR8[HW 4.3]

Homework: HW 4.3

Making the Blog fast

Please download hw4-3.tgz or hw4-3.zip to get started. This assignment requires Mongo 2.2 or above.

In this homework assignment you will be adding some indexes to the post collection to make the blog fast.

We have provided the full code for the blog application and you don't need to make any changes, or even run the blog. But you can, for fun.

We are also providing a patriotic (if you are an American) data set for the blog. There are 1000 entries with lots of comments and tags. You must load this dataset to complete the problem.

[source, console]
----
# from the mongo shell
use blog
db.posts.drop()
# from the terminal window
mongoimport -d blog -c posts < posts.json
----

The blog has been enhanced so that it can also display the top 10 most recent posts by tag.

There are hyperlinks from the post tags to the page that displays the 10 most recent blog entries for that tag. (run the blog and it will be obvious)

Your assignment is to make the following blog pages fast:

* The blog home page

* The page that displays blog posts by tag (http://localhost:8082/tag/whatever)

* The page that displays a blog entry by permalink (http://localhost:8082/post/permalink)

By fast, we mean that indexes should be in place to satisfy these queries such that we only need to scan the number of documents we are going to return.

To figure out what queries you need to optimize, you can read the code and see what it does to display those pages. Isolate those queries and use explain to explore.

Once you have added the indexes to make those pages fast run the following.

[source, console]
----
python validate.py
----

(note that for folks who are using MongoLabs or MongoHQ there are some command line options to validate.py to make it possible to use those services) Now enter the validation code below.

https://www.youtube.com/watch?feature=player_embedded&v=pDtSL7gbQa4[Answer]
[source, console]
----
34f9jr29sh29f20fsplinv
----

===== [HW 4.4]

Homework: HW 4.4

In this problem you will analyze a profile log taken from a mongoDB instance. To start, please download sysprofile.json and import it with the following command:

[source, console]
----
mongoimport -d m101 -c profile < sysprofile.json
----

Now query the profile data, looking for all queries to the students collection in the database school2, sorted in order
of decreasing latency. What is the latency of the longest running operation to the collection, in milliseconds?


* 4715

* 34430

* 5018

* 15820

* 3217
